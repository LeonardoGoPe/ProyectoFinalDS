#DROP DATABASE ProyectoDS;
CREATE DATABASE ProyectoDS;
USE ProyectoDS;


CREATE TABLE TIPO_PAGO(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRIPCION VARCHAR(180)
);


CREATE TABLE BODEGA(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    DIRECCION VARCHAR(30),
    CIUDAD VARCHAR(30),
    PAIS VARCHAR(30),
    TELEFONO VARCHAR(10)
);
CREATE TABLE CATEGORIA(
	CATEGORIA VARCHAR(30),
    DESCRIPCION VARCHAR(220),
    PRIMARY KEY (CATEGORIA)
);

CREATE TABLE PRODUCTO(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(30) UNIQUE,
    DESCRIPCION VARCHAR(30),
    PRECIO FLOAT,
    CATEGORIA VARCHAR(30),
    FOREIGN KEY (CATEGORIA) REFERENCES CATEGORIA(CATEGORIA)
);

CREATE TABLE CLIENTE(
    CEDULA VARCHAR(10) PRIMARY KEY,
    NOMBRE VARCHAR(30),
    APELLIDO VARCHAR(30),
    EMAIL VARCHAR(30),
    DIRECCION VARCHAR(30)
);

CREATE TABLE LOCAL(
ID INT AUTO_INCREMENT PRIMARY KEY,
DIRECCION VARCHAR(30),
CIUDAD VARCHAR(30),
PAIS VARCHAR(30),
TELEFONO VARCHAR(10)

);



CREATE TABLE TIPO_USUARIO(
    TIPO_USUARIO VARCHAR(30),
    DESCRIPCION VARCHAR(220),
    PRIMARY KEY(TIPO_USUARIO)
);

CREATE TABLE USUARIOS(
	USERNAME VARCHAR(30) NOT NULL,
	CLAVE VARCHAR(30),
	TIPO_USUARIO VARCHAR(30),
	PRIMARY KEY (USERNAME),
	FOREIGN KEY (TIPO_USUARIO) REFERENCES TIPO_USUARIO(TIPO_USUARIO)
);

CREATE TABLE JEFE_BODEGA(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(30),
    APELLIDO VARCHAR(30),
    CEDULA VARCHAR(10),
    EMAIL VARCHAR(30),
    ID_BODEGA INT NOT NULL,
    USERNAME VARCHAR(30) NOT NULL,
    FOREIGN KEY (USERNAME) REFERENCES USUARIOS(USERNAME),
    FOREIGN KEY (ID_BODEGA) REFERENCES BODEGA(ID)
);

CREATE TABLE VENDEDOR(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(30),
    APELLIDO VARCHAR(30),
    CEDULA VARCHAR(10),
    EMAIL VARCHAR(30),
    ID_LOCAL INT NOT NULL,
    USERNAME VARCHAR(30) NOT NULL,
    FOREIGN KEY (USERNAME) REFERENCES USUARIOS(USERNAME),
    FOREIGN KEY (ID_LOCAL) REFERENCES LOCAL(ID)
);

CREATE TABLE ADMINISTRADOR(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(30),
    APELLIDO VARCHAR(30),
    CEDULA VARCHAR(10),
    EMAIL VARCHAR(30),
    ID_LOCAL INT NOT NULL,
    USERNAME VARCHAR(30) NOT NULL,
    FOREIGN KEY (USERNAME) REFERENCES USUARIOS(USERNAME),
    FOREIGN KEY (ID_LOCAL) REFERENCES LOCAL(ID)
);

CREATE TABLE GERENTE(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(30),
    APELLIDO VARCHAR(30),
    CEDULA VARCHAR(10),
    EMAIL VARCHAR(30),
    ID_LOCAL INT NOT NULL,
    USERNAME VARCHAR(30) NOT NULL,
    FOREIGN KEY (USERNAME) REFERENCES USUARIOS(USERNAME),
    FOREIGN KEY (ID_LOCAL) REFERENCES LOCAL(ID)
);

CREATE TABLE REPARTIDOR(
	ID INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(30) NOT NULL,
	APELLIDO VARCHAR(30) NOT NULL,
	CEDULA VARCHAR(10) NOT NULL,
	EMAIL VARCHAR(30),
	ID_JEFE_BODEGA INT NOT NULL,
	FOREIGN KEY (ID_JEFE_BODEGA) REFERENCES JEFE_BODEGA(ID)
);

CREATE TABLE FACTURA(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FECHA DATE,
    CEDULA_CLIENTE VARCHAR(10),
    TOTAL FLOAT,
    ID_TIPO_PAGO INT NOT NULL,
    ID_VENDEDOR INT NOT NULL,
    FOREIGN KEY (ID_TIPO_PAGO) REFERENCES TIPO_PAGO(ID),
    FOREIGN KEY (ID_VENDEDOR) REFERENCES VENDEDOR(ID),
	FOREIGN KEY (CEDULA_CLIENTE) REFERENCES CLIENTE(CEDULA)
);

CREATE TABLE VENTA(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    VALOR FLOAT,
    FECHA_VENTA DATE,
    CEDULA_CLIENTE VARCHAR(10) NOT NULL,
    ID_VENDEDOR INT NOT NULL,
    ID_FACTURA INT NOT NULL,
    ID_TIPO_PAGO INT NOT NULL,
    FOREIGN KEY (CEDULA_CLIENTE) REFERENCES CLIENTE(CEDULA),
    FOREIGN KEY (ID_VENDEDOR) REFERENCES VENDEDOR(ID),
    FOREIGN KEY (ID_FACTURA) REFERENCES FACTURA(ID),
    FOREIGN KEY (ID_TIPO_PAGO) REFERENCES TIPO_PAGO(ID)
);

CREATE TABLE COTIZACION(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    VALOR FLOAT,
    FECHA_COTIZACION DATE,
    CEDULA_CLIENTE VARCHAR(10) NOT NULL,
    ID_VENDEDOR INT NOT NULL,
    FOREIGN KEY (CEDULA_CLIENTE) REFERENCES CLIENTE(CEDULA),
    FOREIGN KEY (ID_VENDEDOR) REFERENCES VENDEDOR(ID)
);

CREATE TABLE ENTREGA_DOMICILIO(
     ID INT AUTO_INCREMENT PRIMARY KEY,
     FECHA_ENTREGA DATE,
     ESTADO BOOLEAN NOT NULL DEFAULT FALSE,
     ID_VENTA INT NOT NULL,
     ID_REPARTIDOR INT NOT NULL,
     FOREIGN KEY (ID_VENTA) REFERENCES VENTA(ID),
     FOREIGN KEY (ID_REPARTIDOR) REFERENCES REPARTIDOR(ID)
);

CREATE TABLE PRODUCTO_LOCAL(
	ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_PRODUCTO VARCHAR(30) UNIQUE,
    ID_LOCAL INT NOT NULL,
    CANTIDAD INT NOT NULL,
    FOREIGN KEY (NOMBRE_PRODUCTO) REFERENCES PRODUCTO(NOMBRE),
    FOREIGN KEY (ID_LOCAL) REFERENCES LOCAL(ID)
);

CREATE TABLE PRODUCTO_BODEGA(
	ID INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_PRODUCTO VARCHAR(30) UNIQUE,
    ID_BODEGA INT NOT NULL,
    CANTIDAD INT NOT NULL,
    FOREIGN KEY (NOMBRE_PRODUCTO) REFERENCES PRODUCTO(NOMBRE),
    FOREIGN KEY (ID_BODEGA) REFERENCES BODEGA(ID)
);

CREATE TABLE ENTREGA_LOCAL(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ESTADO BOOLEAN DEFAULT FALSE,
    FECHA_ENTREGA DATE,
    CANTIDAD_PRODUCTO INT NOT NULL,
    ID_PRODUCTO INT NOT NULL,
    ID_BODEGA INT NOT NULL,
    ID_REPARTIDOR INT NOT NULL,
    ID_LOCAL INT NOT NULL,
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID),
    FOREIGN KEY (ID_BODEGA) REFERENCES BODEGA(ID)

);

CREATE TABLE PEDIDO_LOCAL(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FECHA_ENTREGA DATE,
    ESTADO BOOLEAN DEFAULT FALSE,
    ID_GERENTE INT NOT NULL,
    ID_JEFE_BODEGA INT NOT NULL,
    FOREIGN KEY (ID_GERENTE) REFERENCES GERENTE(ID),
    FOREIGN KEY (ID_JEFE_BODEGA) REFERENCES JEFE_BODEGA(ID)
);

CREATE TABLE CREDITO(

    ID INT AUTO_INCREMENT PRIMARY KEY,
    DESCRIPCION VARCHAR(30),
    ID_VENTA INT NOT NULL,
    FOREIGN KEY (ID_VENTA) REFERENCES VENTA(ID)
);


CREATE TABLE VENTA_PRODUCTO(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ID_FACTURA INT NOT NULL,
    ID_VENDEDOR INT NOT NULL,
    CEDULA_CLIENTE VARCHAR(10) NOT NULL,
    FOREIGN KEY (ID_FACTURA) REFERENCES FACTURA(ID),
    FOREIGN KEY (ID_VENDEDOR) REFERENCES VENDEDOR(ID),
    FOREIGN KEY (CEDULA_CLIENTE) REFERENCES CLIENTE(CEDULA)
);

CREATE TABLE PRODUCTO_COTIZACION(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ID_COTIZACION INT NOT NULL,
    ID_PRODUCTO INT NOT NULL,
    FOREIGN KEY (ID_COTIZACION) REFERENCES COTIZACION(ID),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID)
);



#Datos de prueba ingresados
INSERT INTO TIPO_USUARIO
VALUES("Vendedor","Personas que realizan ventas"),
		("Administrador","Persona que administra la BD"),
        ("Gerente","Persona que administra el local"),
        ("Jefe de bodega","Persona que administra la bodega");

INSERT INTO USUARIOS
VALUES("jpiguave","123abc","Vendedor"),
		("jperez","234bcd","Vendedor"),
        ("fmartinez","345cde","Vendedor"),
        ("jalvarez","abc123","Gerente"),
        ("vsalazar","123456","Administrador"),
        ("uperlaza","234567","Jefe de bodega");

INSERT INTO LOCAL(DIRECCION,CIUDAD,PAIS,TELEFONO)
VALUES("Alborada","Guayaquil","Ecuador","2876654");

INSERT INTO BODEGA(DIRECCION,CIUDAD,PAIS,TELEFONO)
VALUES("9 de Octubre","Guayaquil","Ecuador","2874423");

INSERT INTO VENDEDOR(NOMBRE,APELLIDO,CEDULA,EMAIL,ID_LOCAL,USERNAME)
VALUES("Javier","Piguave","0987753311","jpigu@gmail.com",1,"jpiguave"),
		("Juan","Perez","0981188732","jpez@gmail.com",1,"jperez"),
        ("Fernando","Martinez","0989977343","fmar@gmail.com",1,"fmartinez");

INSERT INTO GERENTE(NOMBRE,APELLIDO,CEDULA,EMAIL,ID_LOCAL,USERNAME)
VALUES("Jaime","Alvarez","0987333121","jalva@gmail.com",1,"jalvarez");

INSERT INTO JEFE_BODEGA(NOMBRE,APELLIDO,CEDULA,EMAIL,ID_BODEGA,USERNAME)
VALUES("Umberto","Perlaza","0983631224","uper@gmail.com",1,"uperlaza");

INSERT INTO CATEGORIA(CATEGORIA,DESCRIPCION)
VALUES("COMPUTO","EQUIPO DE COMPUTO"),
		("ACCESORIOS","EXTRAS DE COMPUTO Y CELULARES"),
        ("CABLES","CABLES DE DIFERENTES TIPOS"),
        ("CELULAR","CELULARES DE DIFERENTES MODELOS");

INSERT INTO PRODUCTO(NOMBRE,DESCRIPCION,PRECIO,CATEGORIA)
VALUES("TECLADO","TECLADO INALAMBRICO",30.00,"COMPUTO"),
		("MONITOR LG","MONITOR PLASMA",120.00,"COMPUTO"),
        ("SAMSUNG S7","CELULAR SAMSUNG",210.00,"CELULAR"),
        ("HUAWEI P30","CELULAR GAMA ALTA",180.00,"CELULAR"),
        ("ADAPTADOR VGA","CABLE ADAPTADOR",10.00,"CABLES"),
        ("TABLE A5","TABLE A5 SAMSUNG",130.00,"CELULAR"),
        ("MOUSE","MOUSE HP GAMER",25.00,"ACCESORIOS"),
        ("PARLANTES","PARLANTES CUADRADOS",10.00,"ACCESORIOS");

INSERT INTO PRODUCTO_LOCAL(NOMBRE_PRODUCTO,ID_LOCAL,CANTIDAD)
VALUES("MONITOR LG",1,10),
		("HUAWEI P30",1,20),
        ("MOUSE",1,30),
        ("PARLANTES",1,25),
        ("TABLE A5",1,10),
        ("TECLADO",1,0),
        ("SAMSUNG S7",1,0),
        ("ADAPTADOR VGA",1,0);

INSERT INTO PRODUCTO_BODEGA(NOMBRE_PRODUCTO,ID_BODEGA,CANTIDAD)
VALUES("MONITOR LG",1,100),
		("HUAWEI P30",1,200),
        ("MOUSE",1,400),
        ("PARLANTES",1,100),
        ("TABLE A5",1,100),
        ("TECLADO",1,90),
        ("SAMSUNG S7",1,40),
        ("ADAPTADOR VGA",1,300);
   
DELIMITER $$
CREATE PROCEDURE FILTRAR_CATEGORIA_LOCAL(IN CATEGORIA VARCHAR(30), ID_LOCAL INT)
	SELECT PRODUCTO.NOMBRE, PRODUCTO.DESCRIPCION, PRODUCTO_LOCAL.CANTIDAD 
	FROM PRODUCTO
	INNER JOIN PRODUCTO_LOCAL ON PRODUCTO.NOMBRE = PRODUCTO_LOCAL.NOMBRE_PRODUCTO AND PRODUCTO.CATEGORIA = CATEGORIA AND PRODUCTO_LOCAL.ID_LOCAL = ID_LOCAL
$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE FILTRAR_CATEGORIA_BODEGA(IN CATEGORIA VARCHAR(30), ID_BODEGA INT)
	SELECT PRODUCTO.NOMBRE, PRODUCTO.DESCRIPCION, PRODUCTO_BODEGA.CANTIDAD 
	FROM PRODUCTO
	INNER JOIN PRODUCTO_BODEGA ON PRODUCTO.NOMBRE = PRODUCTO_BODEGA.NOMBRE_PRODUCTO AND PRODUCTO.CATEGORIA = CATEGORIA AND PRODUCTO_BODEGA.ID_BODEGA = ID_BODEGA
$$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE QUITAR_STOCK_BODEGA(IN CANTIDAD_NUEVA INT, ID INT, PRODUCTO VARCHAR(30))
	UPDATE PRODUCTO_BODEGA 
	SET CANTIDAD = CANTIDAD_NUEVA
	WHERE ID_BODEGA=ID AND NOMBRE_PRODUCTO=PRODUCTO
$$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE AGREGAR_STOCK_LOCAL(IN CANTIDAD_NUEVA INT, ID INT, PRODUCTO VARCHAR(30))
	UPDATE PRODUCTO_LOCAL
	SET CANTIDAD = CANTIDAD_NUEVA
	WHERE ID_LOCAL=ID AND NOMBRE_PRODUCTO=PRODUCTO
$$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE USUARIOS()
	SELECT *
	FROM USUARIOS
$$
DELIMITER ;

#DROP PROCEDURE IF EXISTS AGREGAR_STOCK_LOCAL